"use client"

import type React from "react"

import { useState, useCallback } from "react"
import { Button } from "@/components/ui/button"
import { Progress } from "@/components/ui/progress"
import { Card, CardContent } from "@/components/ui/card"
import { Upload, File, AlertTriangle, XCircle } from "lucide-react"
import { toast } from "sonner"
import { ScanResults } from "./ScanResults"
import type { ScanResult } from "@/lib/utils"

export function FileUpload() {
  const [isDragging, setIsDragging] = useState(false)
  const [isScanning, setIsScanning] = useState(false)
  const [scanProgress, setScanProgress] = useState(0)
  const [scanResult, setScanResult] = useState<ScanResult | null>(null)
  const [selectedFile, setSelectedFile] = useState<File | null>(null)

  const handleDragOver = useCallback((e: React.DragEvent) => {
    e.preventDefault()
    setIsDragging(true)
  }, [])

  const handleDragLeave = useCallback((e: React.DragEvent) => {
    e.preventDefault()
    setIsDragging(false)
  }, [])

  const handleDrop = useCallback((e: React.DragEvent) => {
    e.preventDefault()
    setIsDragging(false)

    const files = Array.from(e.dataTransfer.files)
    if (files.length > 0) {
      setSelectedFile(files[0])
    }
  }, [])

  const handleFileSelect = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {
    const files = e.target.files
    if (files && files.length > 0) {
      setSelectedFile(files[0])
    }
  }, [])

  const startScan = async () => {
    if (!selectedFile) {
      toast.error("Please select a file to scan")
      return
    }

    setIsScanning(true)
    setScanProgress(0)
    setScanResult(null)

    // Simulate progress
    const progressInterval = setInterval(() => {
      setScanProgress((prev) => {
        if (prev >= 90) {
          clearInterval(progressInterval)
          return 90
        }
        return prev + Math.random() * 15
      })
    }, 200)

    try {
      const formData = new FormData()
      formData.append("file", selectedFile)

      const response = await fetch("/api/scan/file", {
        method: "POST",
        body: formData,
      })

      const data = await response.json()

      if (data.success) {
        setScanProgress(100)
        setScanResult(data.result)
        toast.success("File scan completed successfully")
      } else {
        throw new Error(data.error || "Scan failed")
      }
    } catch (error) {
      console.error("Scan error:", error)
      toast.error("Scan failed. Please try again.")
    } finally {
      setIsScanning(false)
      clearInterval(progressInterval)
    }
  }

  const resetScan = () => {
    setSelectedFile(null)
    setScanResult(null)
    setScanProgress(0)
    setIsScanning(false)
  }

  if (scanResult) {
    return (
      <div className="space-y-6">
        <ScanResults result={scanResult} />
        <Button onClick={resetScan} variant="outline" className="w-full bg-transparent">
          Scan Another File
        </Button>
      </div>
    )
  }

  return (
    <div className="space-y-6">
      {/* File Drop Zone */}
      <div
        className={`border-2 border-dashed rounded-lg p-8 text-center transition-all duration-300 ${
          isDragging ? "border-blue-400 bg-blue-500/10" : "border-gray-600 hover:border-blue-500"
        }`}
        onDragOver={handleDragOver}
        onDragLeave={handleDragLeave}
        onDrop={handleDrop}
      >
        <Upload className="h-12 w-12 text-gray-400 mx-auto mb-4" />
        <h3 className="text-lg font-semibold text-white mb-2">Drop your file here or click to browse</h3>
        <p className="text-gray-400 mb-4">Supports all file types â€¢ Max size: 100MB</p>
        <input type="file" onChange={handleFileSelect} className="hidden" id="file-upload" accept="*/*" />
        <Button asChild variant="outline" className="border-blue-500 text-blue-400 bg-transparent">
          <label htmlFor="file-upload" className="cursor-pointer">
            Select File
          </label>
        </Button>
      </div>

      {/* Selected File */}
      {selectedFile && (
        <Card className="bg-slate-700/50 border-blue-500/20">
          <CardContent className="p-4">
            <div className="flex items-center justify-between">
              <div className="flex items-center space-x-3">
                <File className="h-8 w-8 text-blue-400" />
                <div>
                  <p className="text-white font-medium">{selectedFile.name}</p>
                  <p className="text-gray-400 text-sm">{(selectedFile.size / 1024 / 1024).toFixed(2)} MB</p>
                </div>
              </div>
              <Button onClick={resetScan} variant="ghost" size="sm">
                <XCircle className="h-4 w-4" />
              </Button>
            </div>
          </CardContent>
        </Card>
      )}

      {/* Scan Progress */}
      {isScanning && (
        <Card className="bg-slate-700/50 border-blue-500/20">
          <CardContent className="p-6">
            <div className="space-y-4">
              <div className="flex items-center justify-between">
                <span className="text-white font-medium">Scanning file...</span>
                <span className="text-blue-400">{Math.round(scanProgress)}%</span>
              </div>
              <Progress value={scanProgress} className="w-full" />
              <div className="text-sm text-gray-400">Performing static and dynamic analysis...</div>
            </div>
          </CardContent>
        </Card>
      )}

      {/* Scan Button */}
      <Button
        onClick={startScan}
        disabled={!selectedFile || isScanning}
        className="w-full bg-blue-600 hover:bg-blue-700 disabled:opacity-50"
        size="lg"
      >
        {isScanning ? (
          <>
            <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2"></div>
            Scanning...
          </>
        ) : (
          <>
            <AlertTriangle className="mr-2 h-4 w-4" />
            Start Security Scan
          </>
        )}
      </Button>
    </div>
  )
}
