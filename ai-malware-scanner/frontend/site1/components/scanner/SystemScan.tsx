"use client"

import { useState } from "react"
import { Button } from "@/components/ui/button"
import { Progress } from "@/components/ui/progress"
import { Card, CardContent } from "@/components/ui/card"
import { Input } from "@/components/ui/input"
import { Label } from "@/components/ui/label"
import { RadioGroup, RadioGroupItem } from "@/components/ui/radio-group"
import { Monitor, HardDrive, FolderOpen, Play, Square } from "lucide-react"
import { toast } from "sonner"

export function SystemScan() {
  const [scanType, setScanType] = useState("quick")
  const [customPath, setCustomPath] = useState("")
  const [isScanning, setIsScanning] = useState(false)
  const [scanProgress, setScanProgress] = useState(0)
  const [scanId, setScanId] = useState<string | null>(null)

  const startSystemScan = async () => {
    setIsScanning(true)
    setScanProgress(0)

    try {
      const response = await fetch("/api/scan/system", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          scanType,
          customPath: scanType === "custom" ? customPath : undefined,
        }),
      })

      const data = await response.json()

      if (data.success) {
        setScanId(data.scanId)
        toast.success("System scan started successfully")

        // Simulate progress
        const progressInterval = setInterval(() => {
          setScanProgress((prev) => {
            if (prev >= 95) {
              clearInterval(progressInterval)
              return 95
            }
            return prev + Math.random() * 10
          })
        }, 500)

        // Check scan status
        setTimeout(() => {
          clearInterval(progressInterval)
          setScanProgress(100)
          setIsScanning(false)
          toast.success("System scan completed! Check your history for results.")
        }, 10000)
      } else {
        throw new Error(data.error || "Failed to start scan")
      }
    } catch (error) {
      console.error("System scan error:", error)
      toast.error("Failed to start system scan")
      setIsScanning(false)
    }
  }

  const stopScan = () => {
    setIsScanning(false)
    setScanProgress(0)
    setScanId(null)
    toast.info("Scan stopped")
  }

  return (
    <div className="space-y-6">
      {/* Scan Type Selection */}
      <div className="space-y-4">
        <Label className="text-white text-lg">Select Scan Type</Label>
        <RadioGroup value={scanType} onValueChange={setScanType} className="space-y-4">
          <div className="flex items-center space-x-3 p-4 rounded-lg border border-gray-600 hover:border-blue-500 transition-colors">
            <RadioGroupItem value="quick" id="quick" />
            <Monitor className="h-5 w-5 text-blue-400" />
            <div>
              <Label htmlFor="quick" className="text-white font-medium cursor-pointer">
                Quick Scan
              </Label>
              <p className="text-gray-400 text-sm">Scan critical system areas (5-10 minutes)</p>
            </div>
          </div>

          <div className="flex items-center space-x-3 p-4 rounded-lg border border-gray-600 hover:border-blue-500 transition-colors">
            <RadioGroupItem value="full" id="full" />
            <HardDrive className="h-5 w-5 text-green-400" />
            <div>
              <Label htmlFor="full" className="text-white font-medium cursor-pointer">
                Full System Scan
              </Label>
              <p className="text-gray-400 text-sm">Complete system scan (30-60 minutes)</p>
            </div>
          </div>

          <div className="flex items-center space-x-3 p-4 rounded-lg border border-gray-600 hover:border-blue-500 transition-colors">
            <RadioGroupItem value="custom" id="custom" />
            <FolderOpen className="h-5 w-5 text-purple-400" />
            <div>
              <Label htmlFor="custom" className="text-white font-medium cursor-pointer">
                Custom Path Scan
              </Label>
              <p className="text-gray-400 text-sm">Scan specific directory or drive</p>
            </div>
          </div>
        </RadioGroup>
      </div>

      {/* Custom Path Input */}
      {scanType === "custom" && (
        <div className="space-y-2">
          <Label htmlFor="customPath" className="text-white">
            Custom Path
          </Label>
          <Input
            id="customPath"
            value={customPath}
            onChange={(e) => setCustomPath(e.target.value)}
            placeholder="C:\Users\Documents or /home/user/documents"
            className="bg-slate-700 border-gray-600 text-white"
          />
        </div>
      )}

      {/* Scan Progress */}
      {isScanning && (
        <Card className="bg-slate-700/50 border-blue-500/20">
          <CardContent className="p-6">
            <div className="space-y-4">
              <div className="flex items-center justify-between">
                <span className="text-white font-medium">
                  {scanType === "quick" ? "Quick Scan" : scanType === "full" ? "Full System Scan" : "Custom Path Scan"}{" "}
                  in progress...
                </span>
                <span className="text-blue-400">{Math.round(scanProgress)}%</span>
              </div>
              <Progress value={scanProgress} className="w-full" />
              <div className="text-sm text-gray-400">Scanning system files and processes...</div>
              {scanId && <div className="text-xs text-gray-500">Scan ID: {scanId}</div>}
            </div>
          </CardContent>
        </Card>
      )}

      {/* Scan Controls */}
      <div className="flex gap-4">
        <Button
          onClick={startSystemScan}
          disabled={isScanning || (scanType === "custom" && !customPath.trim())}
          className="flex-1 bg-blue-600 hover:bg-blue-700 disabled:opacity-50"
          size="lg"
        >
          {isScanning ? (
            <>
              <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2"></div>
              Scanning...
            </>
          ) : (
            <>
              <Play className="mr-2 h-4 w-4" />
              Start {scanType === "quick" ? "Quick" : scanType === "full" ? "Full" : "Custom"} Scan
            </>
          )}
        </Button>

        {isScanning && (
          <Button onClick={stopScan} variant="destructive" size="lg">
            <Square className="mr-2 h-4 w-4" />
            Stop
          </Button>
        )}
      </div>
    </div>
  )
}
