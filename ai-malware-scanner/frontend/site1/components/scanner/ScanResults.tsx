"use client"

import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card"
import { Badge } from "@/components/ui/badge"
import { Progress } from "@/components/ui/progress"
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs"
import { AlertTriangle, CheckCircle, XCircle, Shield, FileText, Network, Settings, Database } from "lucide-react"
import type { ScanResult } from "@/lib/utils"

interface ScanResultsProps {
  result: ScanResult
}

export function ScanResults({ result }: ScanResultsProps) {
  const getRiskColor = (risk: string) => {
    switch (risk) {
      case "low":
        return "bg-green-500/20 text-green-400 border-green-500/50"
      case "medium":
        return "bg-yellow-500/20 text-yellow-400 border-yellow-500/50"
      case "high":
        return "bg-orange-500/20 text-orange-400 border-orange-500/50"
      case "critical":
        return "bg-red-500/20 text-red-400 border-red-500/50"
      default:
        return "bg-gray-500/20 text-gray-400 border-gray-500/50"
    }
  }

  const getRiskIcon = (risk: string) => {
    switch (risk) {
      case "low":
        return <CheckCircle className="h-5 w-5" />
      case "medium":
        return <AlertTriangle className="h-5 w-5" />
      case "high":
        return <AlertTriangle className="h-5 w-5" />
      case "critical":
        return <XCircle className="h-5 w-5" />
      default:
        return <Shield className="h-5 w-5" />
    }
  }

  return (
    <div className="space-y-6">
      {/* Summary Card */}
      <Card className="bg-slate-800/50 border-blue-500/20">
        <CardHeader>
          <div className="flex items-center justify-between">
            <div>
              <CardTitle className="text-white flex items-center gap-2">
                <FileText className="h-5 w-5 text-blue-400" />
                Scan Results: {result.fileName}
              </CardTitle>
              <CardDescription className="text-gray-400">
                Completed on {new Date(result.scanDate).toLocaleString()}
              </CardDescription>
            </div>
            <Badge className={`${getRiskColor(result.riskLevel)} border`}>
              {getRiskIcon(result.riskLevel)}
              {result.riskLevel.toUpperCase()}
            </Badge>
          </div>
        </CardHeader>
        <CardContent>
          <div className="grid grid-cols-2 md:grid-cols-4 gap-4">
            <div className="text-center">
              <div className="text-2xl font-bold text-white">{result.threatsFound}</div>
              <div className="text-gray-400 text-sm">Threats Found</div>
            </div>
            <div className="text-center">
              <div className="text-2xl font-bold text-blue-400">{result.scanDuration}s</div>
              <div className="text-gray-400 text-sm">Scan Duration</div>
            </div>
            <div className="text-center">
              <div className="text-2xl font-bold text-green-400">{(result.fileSize / 1024 / 1024).toFixed(1)}MB</div>
              <div className="text-gray-400 text-sm">File Size</div>
            </div>
            <div className="text-center">
              <div className="text-2xl font-bold text-purple-400">{result.staticAnalysis.fileType}</div>
              <div className="text-gray-400 text-sm">File Type</div>
            </div>
          </div>
        </CardContent>
      </Card>

      {/* Detailed Analysis */}
      <Tabs defaultValue="static" className="w-full">
        <TabsList className="grid w-full grid-cols-3 bg-slate-800/50 border border-blue-500/20">
          <TabsTrigger value="static" className="data-[state=active]:bg-blue-600">
            Static Analysis
          </TabsTrigger>
          <TabsTrigger value="dynamic" className="data-[state=active]:bg-blue-600">
            Dynamic Analysis
          </TabsTrigger>
          <TabsTrigger value="intelligence" className="data-[state=active]:bg-blue-600">
            Threat Intelligence
          </TabsTrigger>
        </TabsList>

        <TabsContent value="static" className="mt-6">
          <Card className="bg-slate-800/50 border-blue-500/20">
            <CardHeader>
              <CardTitle className="text-white flex items-center gap-2">
                <Settings className="h-5 w-5 text-blue-400" />
                Static Analysis Results
              </CardTitle>
            </CardHeader>
            <CardContent className="space-y-6">
              {/* Entropy */}
              <div>
                <div className="flex justify-between items-center mb-2">
                  <span className="text-white">File Entropy</span>
                  <span className="text-blue-400">{result.staticAnalysis.entropy.toFixed(2)}/8.0</span>
                </div>
                <Progress value={(result.staticAnalysis.entropy / 8) * 100} className="w-full" />
                <p className="text-gray-400 text-sm mt-1">Higher entropy may indicate packed or encrypted content</p>
              </div>

              {/* Suspicious Strings */}
              <div>
                <h4 className="text-white font-medium mb-3">Suspicious Strings Detected</h4>
                <div className="grid grid-cols-1 md:grid-cols-2 gap-2">
                  {result.staticAnalysis.suspiciousStrings.map((str, index) => (
                    <Badge key={index} variant="outline" className="border-yellow-500/50 text-yellow-400">
                      {str}
                    </Badge>
                  ))}
                </div>
              </div>

              {/* Packers */}
              {result.staticAnalysis.packers.length > 0 && (
                <div>
                  <h4 className="text-white font-medium mb-3">Packers Detected</h4>
                  <div className="flex flex-wrap gap-2">
                    {result.staticAnalysis.packers.map((packer, index) => (
                      <Badge key={index} variant="outline" className="border-red-500/50 text-red-400">
                        {packer}
                      </Badge>
                    ))}
                  </div>
                </div>
              )}

              {/* Imports */}
              <div>
                <h4 className="text-white font-medium mb-3">Key Imports</h4>
                <div className="grid grid-cols-1 md:grid-cols-3 gap-2">
                  {result.staticAnalysis.imports.map((imp, index) => (
                    <Badge key={index} variant="secondary" className="bg-slate-700">
                      {imp}
                    </Badge>
                  ))}
                </div>
              </div>
            </CardContent>
          </Card>
        </TabsContent>

        <TabsContent value="dynamic" className="mt-6">
          <Card className="bg-slate-800/50 border-blue-500/20">
            <CardHeader>
              <CardTitle className="text-white flex items-center gap-2">
                <Network className="h-5 w-5 text-green-400" />
                Dynamic Analysis Results
              </CardTitle>
            </CardHeader>
            <CardContent className="space-y-6">
              {/* Network Connections */}
              <div>
                <h4 className="text-white font-medium mb-3">Network Connections</h4>
                {result.dynamicAnalysis.networkConnections.length > 0 ? (
                  <div className="space-y-2">
                    {result.dynamicAnalysis.networkConnections.map((conn, index) => (
                      <div key={index} className="flex items-center justify-between p-3 bg-slate-700/50 rounded-lg">
                        <span className="text-white">
                          {conn.ip}:{conn.port}
                        </span>
                        <Badge variant="outline" className="border-blue-500/50 text-blue-400">
                          {conn.protocol}
                        </Badge>
                      </div>
                    ))}
                  </div>
                ) : (
                  <p className="text-gray-400">No network connections detected</p>
                )}
              </div>

              {/* File Operations */}
              <div>
                <h4 className="text-white font-medium mb-3">File Operations</h4>
                <div className="space-y-2">
                  {result.dynamicAnalysis.fileOperations.map((op, index) => (
                    <div key={index} className="p-2 bg-slate-700/30 rounded text-gray-300 text-sm font-mono">
                      {op}
                    </div>
                  ))}
                </div>
              </div>

              {/* Registry Changes */}
              <div>
                <h4 className="text-white font-medium mb-3">Registry Changes</h4>
                <div className="space-y-2">
                  {result.dynamicAnalysis.registryChanges.map((change, index) => (
                    <div key={index} className="p-2 bg-slate-700/30 rounded text-gray-300 text-sm font-mono">
                      {change}
                    </div>
                  ))}
                </div>
              </div>

              {/* Process Creation */}
              {result.dynamicAnalysis.processCreation.length > 0 && (
                <div>
                  <h4 className="text-white font-medium mb-3">Process Creation</h4>
                  <div className="flex flex-wrap gap-2">
                    {result.dynamicAnalysis.processCreation.map((process, index) => (
                      <Badge key={index} variant="outline" className="border-red-500/50 text-red-400">
                        {process}
                      </Badge>
                    ))}
                  </div>
                </div>
              )}
            </CardContent>
          </Card>
        </TabsContent>

        <TabsContent value="intelligence" className="mt-6">
          <Card className="bg-slate-800/50 border-blue-500/20">
            <CardHeader>
              <CardTitle className="text-white flex items-center gap-2">
                <Database className="h-5 w-5 text-purple-400" />
                Threat Intelligence
              </CardTitle>
            </CardHeader>
            <CardContent className="space-y-6">
              {/* VirusTotal Score */}
              <div>
                <div className="flex justify-between items-center mb-2">
                  <span className="text-white">VirusTotal Detection Score</span>
                  <span className="text-red-400">{result.threatIntelligence.virusTotalScore}/70</span>
                </div>
                <Progress value={(result.threatIntelligence.virusTotalScore / 70) * 100} className="w-full" />
              </div>

              {/* Malware Bazaar */}
              <div className="flex items-center justify-between p-4 bg-slate-700/50 rounded-lg">
                <span className="text-white">Malware Bazaar Match</span>
                <Badge
                  className={
                    result.threatIntelligence.malwareBazaarMatch
                      ? "bg-red-500/20 text-red-400"
                      : "bg-green-500/20 text-green-400"
                  }
                >
                  {result.threatIntelligence.malwareBazaarMatch ? "MATCH FOUND" : "NO MATCH"}
                </Badge>
              </div>

              {/* Reputation */}
              <div className="flex items-center justify-between p-4 bg-slate-700/50 rounded-lg">
                <span className="text-white">File Reputation</span>
                <Badge className={getRiskColor(result.riskLevel)}>{result.threatIntelligence.reputation}</Badge>
              </div>

              {/* Detailed Report */}
              <div>
                <h4 className="text-white font-medium mb-3">Detailed Report</h4>
                <div className="p-4 bg-slate-700/30 rounded-lg">
                  <p className="text-gray-300">{result.detailedReport}</p>
                </div>
              </div>
            </CardContent>
          </Card>
        </TabsContent>
      </Tabs>
    </div>
  )
}
