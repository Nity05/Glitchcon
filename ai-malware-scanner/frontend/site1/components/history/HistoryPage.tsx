"use client"

import { useState, useEffect } from "react"
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { Badge } from "@/components/ui/badge"
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select"
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from "@/components/ui/table"
import { Search, Filter, Trash2, Eye, AlertTriangle } from "lucide-react"
import { toast } from "sonner"
import { ScanDetailModal } from "./ScanDetailModal"
import type { ScanResult } from "@/lib/utils"

export function HistoryPage() {
  const [scanHistory, setScanHistory] = useState<ScanResult[]>([])
  const [filteredHistory, setFilteredHistory] = useState<ScanResult[]>([])
  const [searchTerm, setSearchTerm] = useState("")
  const [filterRisk, setFilterRisk] = useState("all")
  const [filterType, setFilterType] = useState("all")
  const [selectedScan, setSelectedScan] = useState<ScanResult | null>(null)
  const [isLoading, setIsLoading] = useState(true)

  useEffect(() => {
    fetchScanHistory()
  }, [])

  useEffect(() => {
    filterResults()
  }, [scanHistory, searchTerm, filterRisk, filterType])

  const fetchScanHistory = async () => {
    try {
      const response = await fetch("/api/history")
      const data = await response.json()

      if (data.success) {
        setScanHistory(data.results)
      } else {
        toast.error("Failed to fetch scan history")
      }
    } catch (error) {
      console.error("History fetch error:", error)
      toast.error("Failed to fetch scan history")
    } finally {
      setIsLoading(false)
    }
  }

  const filterResults = () => {
    let filtered = scanHistory

    // Search filter
    if (searchTerm) {
      filtered = filtered.filter((scan) => scan.fileName.toLowerCase().includes(searchTerm.toLowerCase()))
    }

    // Risk level filter
    if (filterRisk !== "all") {
      filtered = filtered.filter((scan) => scan.riskLevel === filterRisk)
    }

    // Scan type filter
    if (filterType !== "all") {
      filtered = filtered.filter((scan) => scan.scanType === filterType)
    }

    setFilteredHistory(filtered)
  }

  const deleteScan = async (scanId: string) => {
    try {
      const response = await fetch(`/api/history?id=${scanId}`, {
        method: "DELETE",
      })

      if (response.ok) {
        setScanHistory((prev) => prev.filter((scan) => scan._id !== scanId))
        toast.success("Scan deleted successfully")
      } else {
        toast.error("Failed to delete scan")
      }
    } catch (error) {
      console.error("Delete error:", error)
      toast.error("Failed to delete scan")
    }
  }

  const getRiskColor = (risk: string) => {
    switch (risk) {
      case "low":
        return "bg-green-500/20 text-green-400 border-green-500/50"
      case "medium":
        return "bg-yellow-500/20 text-yellow-400 border-yellow-500/50"
      case "high":
        return "bg-orange-500/20 text-orange-400 border-orange-500/50"
      case "critical":
        return "bg-red-500/20 text-red-400 border-red-500/50"
      default:
        return "bg-gray-500/20 text-gray-400 border-gray-500/50"
    }
  }

  const getTypeColor = (type: string) => {
    switch (type) {
      case "file":
        return "bg-blue-500/20 text-blue-400"
      case "system":
        return "bg-purple-500/20 text-purple-400"
      case "custom":
        return "bg-green-500/20 text-green-400"
      default:
        return "bg-gray-500/20 text-gray-400"
    }
  }

  const stats = {
    total: scanHistory.length,
    threats: scanHistory.filter((scan) => scan.threatsFound > 0).length,
    clean: scanHistory.filter((scan) => scan.threatsFound === 0).length,
    critical: scanHistory.filter((scan) => scan.riskLevel === "critical").length,
  }

  if (isLoading) {
    return (
      <div className="container mx-auto px-4 py-16">
        <div className="text-center">
          <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-400 mx-auto mb-4"></div>
          <p className="text-gray-400">Loading scan history...</p>
        </div>
      </div>
    )
  }

  return (
    <div className="container mx-auto px-4 py-16">
      <div className="max-w-7xl mx-auto">
        {/* Header */}
        <div className="text-center mb-12">
          <h1 className="text-4xl md:text-6xl font-bold text-white mb-6">
            Scan <span className="text-blue-400">History</span>
          </h1>
          <p className="text-xl text-gray-300 max-w-3xl mx-auto">
            View and manage your security scan results and reports
          </p>
        </div>

        {/* Statistics */}
        <div className="grid grid-cols-2 md:grid-cols-4 gap-6 mb-8">
          <Card className="bg-slate-800/50 border-blue-500/20">
            <CardContent className="p-6 text-center">
              <div className="text-3xl font-bold text-blue-400 mb-2">{stats.total}</div>
              <div className="text-gray-300">Total Scans</div>
            </CardContent>
          </Card>
          <Card className="bg-slate-800/50 border-red-500/20">
            <CardContent className="p-6 text-center">
              <div className="text-3xl font-bold text-red-400 mb-2">{stats.threats}</div>
              <div className="text-gray-300">Threats Found</div>
            </CardContent>
          </Card>
          <Card className="bg-slate-800/50 border-green-500/20">
            <CardContent className="p-6 text-center">
              <div className="text-3xl font-bold text-green-400 mb-2">{stats.clean}</div>
              <div className="text-gray-300">Clean Files</div>
            </CardContent>
          </Card>
          <Card className="bg-slate-800/50 border-orange-500/20">
            <CardContent className="p-6 text-center">
              <div className="text-3xl font-bold text-orange-400 mb-2">{stats.critical}</div>
              <div className="text-gray-300">Critical Risks</div>
            </CardContent>
          </Card>
        </div>

        {/* Filters */}
        <Card className="bg-slate-800/50 border-blue-500/20 mb-8">
          <CardHeader>
            <CardTitle className="text-white flex items-center gap-2">
              <Filter className="h-5 w-5" />
              Filter Results
            </CardTitle>
          </CardHeader>
          <CardContent>
            <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
              <div className="relative">
                <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-gray-400" />
                <Input
                  placeholder="Search by filename..."
                  value={searchTerm}
                  onChange={(e) => setSearchTerm(e.target.value)}
                  className="pl-10 bg-slate-700 border-gray-600 text-white"
                />
              </div>
              <Select value={filterRisk} onValueChange={setFilterRisk}>
                <SelectTrigger className="bg-slate-700 border-gray-600 text-white">
                  <SelectValue placeholder="Filter by risk level" />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="all">All Risk Levels</SelectItem>
                  <SelectItem value="low">Low Risk</SelectItem>
                  <SelectItem value="medium">Medium Risk</SelectItem>
                  <SelectItem value="high">High Risk</SelectItem>
                  <SelectItem value="critical">Critical Risk</SelectItem>
                </SelectContent>
              </Select>
              <Select value={filterType} onValueChange={setFilterType}>
                <SelectTrigger className="bg-slate-700 border-gray-600 text-white">
                  <SelectValue placeholder="Filter by scan type" />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="all">All Scan Types</SelectItem>
                  <SelectItem value="file">File Scans</SelectItem>
                  <SelectItem value="system">System Scans</SelectItem>
                  <SelectItem value="custom">Custom Scans</SelectItem>
                </SelectContent>
              </Select>
            </div>
          </CardContent>
        </Card>

        {/* Results Table */}
        <Card className="bg-slate-800/50 border-blue-500/20">
          <CardHeader>
            <CardTitle className="text-white">Scan Results ({filteredHistory.length})</CardTitle>
            <CardDescription className="text-gray-400">Click on any scan to view detailed results</CardDescription>
          </CardHeader>
          <CardContent>
            {filteredHistory.length === 0 ? (
              <div className="text-center py-12">
                <AlertTriangle className="h-12 w-12 text-gray-400 mx-auto mb-4" />
                <p className="text-gray-400 text-lg">No scan results found</p>
                <p className="text-gray-500">Try adjusting your filters or perform a new scan</p>
              </div>
            ) : (
              <div className="overflow-x-auto">
                <Table>
                  <TableHeader>
                    <TableRow className="border-gray-700">
                      <TableHead className="text-gray-300">File/System</TableHead>
                      <TableHead className="text-gray-300">Type</TableHead>
                      <TableHead className="text-gray-300">Risk Level</TableHead>
                      <TableHead className="text-gray-300">Threats</TableHead>
                      <TableHead className="text-gray-300">Date</TableHead>
                      <TableHead className="text-gray-300">Actions</TableHead>
                    </TableRow>
                  </TableHeader>
                  <TableBody>
                    {filteredHistory.map((scan) => (
                      <TableRow key={scan._id} className="border-gray-700 hover:bg-slate-700/30">
                        <TableCell className="text-white font-medium">{scan.fileName}</TableCell>
                        <TableCell>
                          <Badge className={getTypeColor(scan.scanType)}>{scan.scanType}</Badge>
                        </TableCell>
                        <TableCell>
                          <Badge className={`${getRiskColor(scan.riskLevel)} border`}>
                            {scan.riskLevel.toUpperCase()}
                          </Badge>
                        </TableCell>
                        <TableCell className="text-white">{scan.threatsFound}</TableCell>
                        <TableCell className="text-gray-300">{new Date(scan.scanDate).toLocaleDateString()}</TableCell>
                        <TableCell>
                          <div className="flex gap-2">
                            <Button
                              size="sm"
                              variant="outline"
                              onClick={() => setSelectedScan(scan)}
                              className="border-blue-500/50 text-blue-400 hover:bg-blue-500/10"
                            >
                              <Eye className="h-4 w-4" />
                            </Button>
                            <Button
                              size="sm"
                              variant="outline"
                              onClick={() => scan._id && deleteScan(scan._id)}
                              className="border-red-500/50 text-red-400 hover:bg-red-500/10"
                            >
                              <Trash2 className="h-4 w-4" />
                            </Button>
                          </div>
                        </TableCell>
                      </TableRow>
                    ))}
                  </TableBody>
                </Table>
              </div>
            )}
          </CardContent>
        </Card>
      </div>

      {/* Scan Detail Modal */}
      {selectedScan && (
        <ScanDetailModal scan={selectedScan} isOpen={!!selectedScan} onClose={() => setSelectedScan(null)} />
      )}
    </div>
  )
}
