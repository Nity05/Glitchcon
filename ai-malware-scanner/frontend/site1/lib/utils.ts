import { type ClassValue, clsx } from "clsx"
import { twMerge } from "tailwind-merge"

export function cn(...inputs: ClassValue[]) {
  return twMerge(clsx(inputs))
}

export interface ScanResult {
  _id?: string
  fileName: string
  fileSize: number
  scanType: "file" | "system" | "custom"
  status: "scanning" | "completed" | "failed"
  riskLevel: "low" | "medium" | "high" | "critical"
  threatsFound: number
  scanDate: Date
  scanDuration: number
  staticAnalysis: {
    fileType: string
    entropy: number
    suspiciousStrings: string[]
    packers: string[]
    imports: string[]
  }
  dynamicAnalysis: {
    networkConnections: Array<{
      ip: string
      port: number
      protocol: string
    }>
    fileOperations: string[]
    registryChanges: string[]
    processCreation: string[]
  }
  threatIntelligence: {
    virusTotalScore: number
    malwareBazaarMatch: boolean
    reputation: string
  }
  detailedReport: string
}

export function generateMockScanResult(fileName: string, scanType: "file" | "system" | "custom"): ScanResult {
  const riskLevels: Array<"low" | "medium" | "high" | "critical"> = ["low", "medium", "high", "critical"]
  const riskLevel = riskLevels[Math.floor(Math.random() * riskLevels.length)]
  const threatsFound = riskLevel === "low" ? 0 : Math.floor(Math.random() * 5) + 1

  return {
    fileName,
    fileSize: Math.floor(Math.random() * 10000000) + 1000,
    scanType,
    status: "completed",
    riskLevel,
    threatsFound,
    scanDate: new Date(),
    scanDuration: Math.floor(Math.random() * 30) + 5,
    staticAnalysis: {
      fileType: fileName.split(".").pop() || "unknown",
      entropy: Math.random() * 8,
      suspiciousStrings: ["CreateProcess", "RegSetValue", "InternetConnect"],
      packers: riskLevel === "high" || riskLevel === "critical" ? ["UPX", "Themida"] : [],
      imports: ["kernel32.dll", "user32.dll", "advapi32.dll"],
    },
    dynamicAnalysis: {
      networkConnections:
        riskLevel === "high" || riskLevel === "critical"
          ? [
              { ip: "192.168.1.100", port: 443, protocol: "TCP" },
              { ip: "10.0.0.1", port: 80, protocol: "HTTP" },
            ]
          : [],
      fileOperations: ["C:\\temp\\malware.exe", "C:\\Windows\\System32\\evil.dll"],
      registryChanges: ["HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run"],
      processCreation: riskLevel === "critical" ? ["cmd.exe", "powershell.exe"] : [],
    },
    threatIntelligence: {
      virusTotalScore: riskLevel === "critical" ? Math.floor(Math.random() * 20) + 40 : Math.floor(Math.random() * 10),
      malwareBazaarMatch: riskLevel === "high" || riskLevel === "critical",
      reputation: riskLevel === "low" ? "Clean" : riskLevel === "medium" ? "Suspicious" : "Malicious",
    },
    detailedReport: `Comprehensive analysis of ${fileName} completed. ${threatsFound > 0 ? `${threatsFound} potential threats detected.` : "No threats detected."} File shows ${riskLevel} risk level based on static and dynamic analysis.`,
  }
}
