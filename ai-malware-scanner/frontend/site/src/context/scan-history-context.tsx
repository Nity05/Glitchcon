"use client"

import { createContext, useState, useEffect, type ReactNode } from "react"

export interface ScanRecord {
  id: string
  timestamp: string
  filename: string
  fileSize: number
  riskScore: number
  riskLevel: string
  verdict: string
  hash: string
}

interface ScanHistoryContextType {
  scanRecords: ScanRecord[]
  addScanRecord: (record: ScanRecord) => void
  removeScanRecord: (id: string) => void
  clearHistory: () => void
}

export const ScanHistoryContext = createContext<ScanHistoryContextType>({
  scanRecords: [],
  addScanRecord: () => {},
  removeScanRecord: () => {},
  clearHistory: () => {},
})

export const ScanHistoryProvider = ({ children }: { children: ReactNode }) => {
  const [scanRecords, setScanRecords] = useState<ScanRecord[]>([])

  // Load scan history from localStorage on initial render
  useEffect(() => {
    const savedHistory = localStorage.getItem("scanHistory")
    if (savedHistory) {
      try {
        setScanRecords(JSON.parse(savedHistory))
      } catch (error) {
        console.error("Failed to parse scan history:", error)
        localStorage.removeItem("scanHistory")
      }
    }
  }, [])

  // Save scan history to localStorage whenever it changes
  useEffect(() => {
    localStorage.setItem("scanHistory", JSON.stringify(scanRecords))
  }, [scanRecords])

  const addScanRecord = (record: ScanRecord) => {
    setScanRecords((prev) => [record, ...prev])
  }

  const removeScanRecord = (id: string) => {
    setScanRecords((prev) => prev.filter((record) => record.id !== id))
  }

  const clearHistory = () => {
    setScanRecords([])
  }

  return (
    <ScanHistoryContext.Provider value={{ scanRecords, addScanRecord, removeScanRecord, clearHistory }}>
      {children}
    </ScanHistoryContext.Provider>
  )
}

