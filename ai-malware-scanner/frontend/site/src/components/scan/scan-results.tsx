"use client"

import { useState, useEffect } from "react"
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card"
import { Progress } from "@/components/ui/progress"
import { Badge } from "@/components/ui/badge"
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs"
import {
  AlertTriangle,
  CheckCircle,
  Clock,
  FileText,
  Shield,
  XCircle,
  AlertCircle,
  FileWarning,
  Network,
} from "lucide-react"

export function ScanResults({ results, status }) {
  const [activeTab, setActiveTab] = useState("overview")

  // If we have file scan results, switch to file tab
  useEffect(() => {
    if (results && !status) {
      setActiveTab("file")
    } else if (status) {
      setActiveTab("overview")
    }
  }, [results, status])

  if (!results && !status) {
    return (
      <Card>
        <CardContent className="p-6 text-center text-muted-foreground">
          <Clock className="h-12 w-12 mx-auto mb-4 opacity-50" />
          <p>No scan results yet. Start a scan to see results here.</p>
        </CardContent>
      </Card>
    )
  }

  return (
    <Card>
      <CardHeader>
        <CardTitle className="flex items-center gap-2">
          <Shield className="h-5 w-5 text-primary" />
          Scan Results
        </CardTitle>
      </CardHeader>
      <CardContent>
        <Tabs value={activeTab} onValueChange={setActiveTab}>
          <TabsList className="grid w-full grid-cols-2">
            <TabsTrigger value="overview">Overview</TabsTrigger>
            <TabsTrigger value="file" disabled={!results}>
              Details
            </TabsTrigger>
          </TabsList>

          <TabsContent value="overview" className="pt-4">
            {status && (
              <div className="space-y-6">
                <div className="flex items-center justify-between">
                  <div className="flex items-center gap-2">
                    <StatusIcon status={status.status} />
                    <span className="font-medium">
                      {status.status === "idle" && "Ready to scan"}
                      {status.status === "running" && "Scan in progress"}
                      {status.status === "completed" && "Scan completed"}
                      {status.status === "error" && "Scan error"}
                    </span>
                  </div>

                  {status.status === "running" && (
                    <Badge
                      variant="outline"
                      className="bg-blue-50 text-blue-700 dark:bg-blue-900/20 dark:text-blue-400"
                    >
                      Running
                    </Badge>
                  )}

                  {status.status === "completed" && (
                    <Badge
                      variant="outline"
                      className="bg-green-50 text-green-700 dark:bg-green-900/20 dark:text-green-400"
                    >
                      Completed
                    </Badge>
                  )}
                </div>

                {(status.status === "running" || status.status === "completed") && (
                  <>
                    <div className="space-y-2">
                      <div className="flex justify-between text-sm">
                        <span>Progress</span>
                        <span>
                          {status.stats.scanned_files} / {status.stats.total_files} files
                        </span>
                      </div>
                      <Progress value={(status.stats.scanned_files / status.stats.total_files) * 100} className="h-2" />
                    </div>

                    <div className="grid grid-cols-3 gap-4">
                      <StatCard
                        icon={<FileText className="h-5 w-5 text-blue-600" />}
                        label="Files Scanned"
                        value={status.stats.scanned_files}
                      />

                      <StatCard
                        icon={<FileWarning className="h-5 w-5 text-red-600" />}
                        label="Malicious"
                        value={status.stats.malicious_files}
                      />

                      <StatCard
                        icon={<AlertCircle className="h-5 w-5 text-amber-600" />}
                        label="Errors"
                        value={status.stats.error_files}
                      />
                    </div>
                  </>
                )}
              </div>
            )}
          </TabsContent>

          <TabsContent value="file" className="pt-4">
            {results && (
              <div className="space-y-6">
                <div className="flex items-center justify-between">
                  <div className="flex items-center gap-2">
                    <FileText className="h-5 w-5 text-primary" />
                    <span className="font-medium">{results.filename}</span>
                  </div>

                  <RiskBadge score={results.combined_risk_score} />
                </div>

                <div className="grid md:grid-cols-2 gap-4">
                  <Card>
                    <CardHeader className="pb-2">
                      <CardTitle className="text-sm font-medium">Static Analysis</CardTitle>
                    </CardHeader>
                    <CardContent className="space-y-4">
                      <div className="flex justify-between items-center">
                        <span className="text-sm text-muted-foreground">Classification</span>
                        <Badge
                          variant={results.static_analysis.prediction.label === "benign" ? "outline" : "destructive"}
                        >
                          {results.static_analysis.prediction.label}
                        </Badge>
                      </div>

                      <div className="flex justify-between items-center">
                        <span className="text-sm text-muted-foreground">Confidence</span>
                        <span className="text-sm font-medium">
                          {(results.static_analysis.prediction.confidence * 100).toFixed(1)}%
                        </span>
                      </div>

                      <div className="space-y-2">
                        <h4 className="text-sm font-medium">File Details</h4>
                        <div className="grid grid-cols-2 gap-2 text-sm">
                          <div className="text-muted-foreground">Size</div>
                          <div>{formatFileSize(results.static_analysis.features.file_size)}</div>

                          <div className="text-muted-foreground">Type</div>
                          <div>{results.static_analysis.features.file_type}</div>

                          <div className="text-muted-foreground">MD5</div>
                          <div className="truncate">{results.static_analysis.features.md5}</div>
                        </div>
                      </div>
                    </CardContent>
                  </Card>

                  <Card>
                    <CardHeader className="pb-2">
                      <CardTitle className="text-sm font-medium">Dynamic Analysis</CardTitle>
                    </CardHeader>
                    <CardContent className="space-y-4">
                      <div className="flex justify-between items-center">
                        <span className="text-sm text-muted-foreground">Risk Level</span>
                        <Badge
                          variant="outline"
                          className={
                            results.dynamic_analysis.risk_level === "Low"
                              ? "bg-green-50 text-green-700 dark:bg-green-900/20 dark:text-green-400"
                              : results.dynamic_analysis.risk_level === "Medium"
                                ? "bg-amber-50 text-amber-700 dark:bg-amber-900/20 dark:text-amber-400"
                                : "bg-red-50 text-red-700 dark:bg-red-900/20 dark:text-red-400"
                          }
                        >
                          {results.dynamic_analysis.risk_level}
                        </Badge>
                      </div>

                      {results.dynamic_analysis.suspicious_indicators.length > 0 ? (
                        <div className="space-y-2">
                          <h4 className="text-sm font-medium">Suspicious Indicators</h4>
                          <ul className="text-sm space-y-1">
                            {results.dynamic_analysis.suspicious_indicators.map((indicator, i) => (
                              <li key={i} className="flex items-center gap-2">
                                <AlertTriangle className="h-3.5 w-3.5 text-amber-500" />
                                {indicator}
                              </li>
                            ))}
                          </ul>
                        </div>
                      ) : (
                        <div className="flex items-center gap-2 text-sm text-muted-foreground">
                          <CheckCircle className="h-4 w-4 text-green-500" />
                          No suspicious indicators detected
                        </div>
                      )}

                      {results.dynamic_analysis.network_connections.length > 0 && (
                        <div className="space-y-2">
                          <h4 className="text-sm font-medium">Network Connections</h4>
                          <ul className="text-sm space-y-1">
                            {results.dynamic_analysis.network_connections.map((connection, i) => (
                              <li key={i} className="flex items-center gap-2">
                                <Network className="h-3.5 w-3.5 text-blue-500" />
                                {connection}
                              </li>
                            ))}
                          </ul>
                        </div>
                      )}
                    </CardContent>
                  </Card>
                </div>
              </div>
            )}
          </TabsContent>
        </Tabs>
      </CardContent>
    </Card>
  )
}

function StatusIcon({ status }) {
  switch (status) {
    case "idle":
      return <Clock className="h-5 w-5 text-muted-foreground" />
    case "running":
      return <Clock className="h-5 w-5 text-blue-500 animate-pulse" />
    case "completed":
      return <CheckCircle className="h-5 w-5 text-green-500" />
    case "error":
      return <XCircle className="h-5 w-5 text-red-500" />
    default:
      return <Clock className="h-5 w-5 text-muted-foreground" />
  }
}

function StatCard({ icon, label, value }) {
  return (
    <div className="flex flex-col items-center justify-center p-4 border rounded-lg">
      <div className="mb-2">{icon}</div>
      <div className="text-2xl font-bold">{value}</div>
      <div className="text-xs text-muted-foreground">{label}</div>
    </div>
  )
}

function RiskBadge({ score }) {
  const variant = "outline"
  let label = "Low Risk"
  let className = "bg-green-50 text-green-700 dark:bg-green-900/20 dark:text-green-400"

  if (score > 0.7) {
    label = "High Risk"
    className = "bg-red-50 text-red-700 dark:bg-red-900/20 dark:text-red-400"
  } else if (score > 0.3) {
    label = "Medium Risk"
    className = "bg-amber-50 text-amber-700 dark:bg-amber-900/20 dark:text-amber-400"
  }

  return (
    <Badge variant={variant} className={className}>
      {label}
    </Badge>
  )
}

function formatFileSize(bytes) {
  if (bytes < 1024) return bytes + " B"
  else if (bytes < 1048576) return (bytes / 1024).toFixed(1) + " KB"
  else if (bytes < 1073741824) return (bytes / 1048576).toFixed(1) + " MB"
  else return (bytes / 1073741824).toFixed(1) + " GB"
}

export default ScanResults;
