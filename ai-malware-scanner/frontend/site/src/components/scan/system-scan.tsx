"use client"

import { useState, useEffect } from "react"
import { Button } from "@/components/ui/button"
import { Card, CardContent } from "@/components/ui/card"
import { Input } from "@/components/ui/input"
import { Label } from "@/components/ui/label"
import { Checkbox } from "@/components/ui/checkbox"
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs"
import { HardDrive, Laptop, FolderOpen, AlertCircle } from "lucide-react"
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert"

export function SystemScanner({ onStatusUpdate }) {
  const [scanType, setScanType] = useState("system")
  const [path, setPath] = useState("")
  const [recursive, setRecursive] = useState(true)
  const [isScanning, setIsScanning] = useState(false)
  const [error, setError] = useState(null)

  // Poll for scan status when a scan is running
  useEffect(() => {
    let statusInterval

    if (isScanning) {
      statusInterval = setInterval(async () => {
        try {
          const response = await fetch("http://127.0.0.1:8001/scan/status")
          if (!response.ok) {
            throw new Error(`Server responded with ${response.status}`)
          }

          const status = await response.json()
          onStatusUpdate(status)

          // If scan is completed or errored, stop polling
          if (status.status === "completed" || status.status === "error") {
            setIsScanning(false)
            clearInterval(statusInterval)
          }
        } catch (err) {
          setError(`Failed to get scan status: ${err.message}`)
          setIsScanning(false)
          clearInterval(statusInterval)
        }
      }, 1000)
    }

    return () => {
      if (statusInterval) clearInterval(statusInterval)
    }
  }, [isScanning, onStatusUpdate])

  const startSystemScan = async () => {
    setError(null)
    setIsScanning(true)

    try {
      const response = await fetch("http://127.0.0.1:8001/scan/system", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
      })

      if (!response.ok) {
        throw new Error(`Server responded with ${response.status}`)
      }

      const result = await response.json()
      onStatusUpdate({
        status: "running",
        stats: { total_files: 0, scanned_files: 0, malicious_files: 0, error_files: 0 },
      })
    } catch (err) {
      setError(`Failed to start system scan: ${err.message}`)
      setIsScanning(false)
    }
  }

  const startDriveScan = async () => {
    if (!path.trim()) {
      setError("Please enter a valid path")
      return
    }

    setError(null)
    setIsScanning(true)

    try {
      const response = await fetch("http://127.0.0.1:8001/scan/drive", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          path: path,
          recursive: recursive,
        }),
      })

      if (!response.ok) {
        throw new Error(`Server responded with ${response.status}`)
      }

      const result = await response.json()
      onStatusUpdate({
        status: "running",
        stats: { total_files: 0, scanned_files: 0, malicious_files: 0, error_files: 0 },
      })
    } catch (err) {
      setError(`Failed to start drive scan: ${err.message}`)
      setIsScanning(false)
    }
  }

  return (
    <div className="space-y-4">
      <h2 className="text-xl font-semibold">System Scanner</h2>

      {error && (
        <Alert variant="destructive">
          <AlertCircle className="h-4 w-4" />
          <AlertTitle>Error</AlertTitle>
          <AlertDescription>{error}</AlertDescription>
        </Alert>
      )}

      <Tabs defaultValue="system" onValueChange={setScanType} value={scanType}>
        <TabsList className="grid w-full grid-cols-2">
          <TabsTrigger value="system" className="gap-2">
            <Laptop className="h-4 w-4" />
            System Scan
          </TabsTrigger>
          <TabsTrigger value="drive" className="gap-2">
            <HardDrive className="h-4 w-4" />
            Drive/Directory Scan
          </TabsTrigger>
        </TabsList>

        <TabsContent value="system" className="p-4 border rounded-md mt-2">
          <Card>
            <CardContent className="pt-6">
              <div className="space-y-4">
                <div className="flex items-center gap-2 text-muted-foreground">
                  <Laptop className="h-5 w-5" />
                  <p>Scan your entire system for malware and suspicious files.</p>
                </div>

                <div className="flex justify-end">
                  <Button onClick={startSystemScan} disabled={isScanning} className="gap-2">
                    {isScanning ? "Scanning..." : "Start System Scan"}
                  </Button>
                </div>
              </div>
            </CardContent>
          </Card>
        </TabsContent>

        <TabsContent value="drive" className="p-4 border rounded-md mt-2">
          <Card>
            <CardContent className="pt-6">
              <div className="space-y-4">
                <div className="flex items-center gap-2 text-muted-foreground mb-4">
                  <FolderOpen className="h-5 w-5" />
                  <p>Scan a specific drive or directory for malware.</p>
                </div>

                <div className="grid gap-2">
                  <Label htmlFor="path">Path to scan</Label>
                  <div className="flex gap-2">
                    <Input
                      id="path"
                      placeholder="e.g., C:\ or /home/user"
                      value={path}
                      onChange={(e) => setPath(e.target.value)}
                    />
                    <Button
                      variant="outline"
                      onClick={() => {
                        // In a real app, this would open a directory picker
                        setPath("/home/user/documents")
                      }}
                    >
                      Browse
                    </Button>
                  </div>
                </div>

                <div className="flex items-center space-x-2">
                  <Checkbox id="recursive" checked={recursive} onCheckedChange={(checked) => setRecursive(!!checked)} />
                  <Label htmlFor="recursive">Scan subdirectories recursively</Label>
                </div>

                <div className="flex justify-end">
                  <Button onClick={startDriveScan} disabled={isScanning || !path.trim()} className="gap-2">
                    {isScanning ? "Scanning..." : "Start Drive Scan"}
                  </Button>
                </div>
              </div>
            </CardContent>
          </Card>
        </TabsContent>
      </Tabs>
    </div>
  )
}


export default SystemScanner;
