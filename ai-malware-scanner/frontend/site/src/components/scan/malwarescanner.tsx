import React, { useState, useCallback } from 'react';
import { Card, CardHeader, CardTitle, CardContent } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Progress } from "@/components/ui/progress";
import { Alert, AlertDescription } from "@/components/ui/alert";
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from "@/components/ui/table";

// Types for scan results
interface StaticAnalysis {
  prediction?: {
    label: string;
    confidence: number;
  };
  features: {
    file_size?: number;
    file_type?: string;
    md5?: string;
    sha256?: string;
    entropy?: number;
  };
}

interface DynamicAnalysis {
  risk_level: 'Low' | 'Medium' | 'High';
  suspicious_indicators: string[];
  network_connections: string[];
  file_activity: string[];
}

interface ThreatIntelligence {
  status: 'success' | 'not_found';
  summary?: {
    detection_ratio: string;
    file_info: {
      first_seen: number;
    };
    top_detections: Array<{
      engine: string;
      result: string;
      category: 'clean' | 'suspicious' | 'malicious';
    }>;
  };
}

interface ScanResult {
  filename: string;
  combined_risk_score: number;
  static_analysis: StaticAnalysis;
  dynamic_analysis: DynamicAnalysis;
  threat_intelligence?: ThreatIntelligence;
}

// File Upload Component
export const FileUploader: React.FC = () => {
  const [file, setFile] = useState<File | null>(null);
  const [uploadProgress, setUploadProgress] = useState(0);
  const [error, setError] = useState<string | null>(null);

  const handleFileChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const selectedFile = e.target.files?.[0];
    if (selectedFile) {
      setFile(selectedFile);
      setError(null);
    }
  };

  const uploadFile = async () => {
    if (!file) {
      setError("Please select a file to upload");
      return;
    }

    const formData = new FormData();
    formData.append("file", file);

    try {
      // Implement file upload logic here
      // This is a placeholder for your actual API endpoint
      const response = await fetch('/api/upload', {
        method: 'POST',
        body: formData
      });

      if (!response.ok) {
        throw new Error('Upload failed');
      }

      // Handle successful upload
    } catch (err) {
      setError(err instanceof Error ? err.message : 'Upload failed');
    }
  };

  return (
    <Card>
      <CardHeader>
        <CardTitle>Upload File for Scanning</CardTitle>
      </CardHeader>
      <CardContent>
        <div className="space-y-4">
          <input 
            type="file" 
            onChange={handleFileChange} 
            className="w-full file:mr-4 file:rounded-md file:border file:border-gray-300 file:bg-gray-50 file:px-4 file:py-2"
          />
          <Button 
            onClick={uploadFile} 
            disabled={!file}
            className="w-full"
          >
            Upload and Scan
          </Button>
          {uploadProgress > 0 && (
            <Progress value={uploadProgress} className="w-full" />
          )}
          {error && (
            <Alert variant="destructive">
              <AlertDescription>{error}</AlertDescription>
            </Alert>
          )}
        </div>
      </CardContent>
    </Card>
  );
};

// Scan Results Component
export const ScanResults: React.FC<{ result: ScanResult }> = ({ result }) => {
  const getRiskScoreClass = (score: number) => {
    if (score > 0.7) return 'text-red-500 font-bold';
    if (score > 0.4) return 'text-yellow-500 font-bold';
    return 'text-green-500 font-bold';
  };

  return (
    <Card>
      <CardHeader>
        <CardTitle>Scan Results</CardTitle>
      </CardHeader>
      <CardContent>
        <div className="space-y-4">
          {/* Summary Section */}
          <section>
            <h3 className="text-lg font-semibold">Summary</h3>
            <p>File: {result.filename}</p>
            <p>Combined Risk Score: <span className={getRiskScoreClass(result.combined_risk_score)}>
              {result.combined_risk_score.toFixed(2)}
            </span></p>
          </section>

          {/* Static Analysis Section */}
          <section>
            <h3 className="text-lg font-semibold">Static Analysis</h3>
            <p>Classification: {result.static_analysis.prediction?.label || 'Unknown'}</p>
            <p>Confidence: {result.static_analysis.prediction?.confidence.toFixed(2) || 'N/A'}</p>

            <Table>
              <TableHeader>
                <TableRow>
                  <TableHead>Property</TableHead>
                  <TableHead>Value</TableHead>
                </TableRow>
              </TableHeader>
              <TableBody>
                {Object.entries(result.static_analysis.features).map(([key, value]) => (
                  <TableRow key={key}>
                    <TableCell>{key}</TableCell>
                    <TableCell>{value}</TableCell>
                  </TableRow>
                ))}
              </TableBody>
            </Table>
          </section>

          {/* Dynamic Analysis Section */}
          <section>
            <h3 className="text-lg font-semibold">Dynamic Analysis</h3>
            <p>Risk Level: <span className={
              result.dynamic_analysis.risk_level === 'High' 
                ? 'text-red-500 font-bold' 
                : result.dynamic_analysis.risk_level === 'Medium' 
                  ? 'text-yellow-500 font-bold' 
                  : 'text-green-500 font-bold'
            }>
              {result.dynamic_analysis.risk_level}
            </span></p>

            <h4 className="font-medium mt-2">Suspicious Indicators</h4>
            <ul className="list-disc pl-5">
              {result.dynamic_analysis.suspicious_indicators.map((indicator, index) => (
                <li key={index}>{indicator}</li>
              ))}
            </ul>
          </section>
        </div>
      </CardContent>
    </Card>
  );
};

// System Scan Component
export const SystemScan: React.FC = () => {
  const [scanStatus, setScanStatus] = useState<string | null>(null);
  const [error, setError] = useState<string | null>(null);

  const startSystemScan = useCallback(async () => {
    try {
      // Implement system scan logic
      const response = await fetch('/api/scan/system', { method: 'POST' });
      
      if (!response.ok) {
        throw new Error('System scan failed');
      }

      const result = await response.json();
      setScanStatus(result.message || 'Scan started successfully');
    } catch (err) {
      setError(err instanceof Error ? err.message : 'Scan failed');
    }
  }, []);

  return (
    <Card>
      <CardHeader>
        <CardTitle>System Scanning</CardTitle>
      </CardHeader>
      <CardContent>
        <div className="space-y-4">
          <div className="flex space-x-2">
            <Button onClick={() => startSystemScan()}>Scan Full System</Button>
            <Button variant="secondary" onClick={() => {} /* implement drive scan */}>
              Scan C Drive
            </Button>
            <Button variant="secondary" onClick={() => {} /* implement custom path */}>
              Scan Custom Path
            </Button>
          </div>

          {scanStatus && (
            <Alert>
              <AlertDescription>{scanStatus}</AlertDescription>
            </Alert>
          )}

          {error && (
            <Alert variant="destructive">
              <AlertDescription>{error}</AlertDescription>
            </Alert>
          )}
        </div>
      </CardContent>
    </Card>
  );
};

// Main Malware Scanner Component
export const MalwareScanner: React.FC = () => {
  const [scanResult, setScanResult] = useState<ScanResult | null>(null);

  return (
    <div className="container mx-auto px-4 py-8 space-y-6">
      <h1 className="text-2xl font-bold">AI Malware Scanner</h1>
      
      <FileUploader />
      <SystemScan />
      
      {scanResult && <ScanResults result={scanResult} />}
    </div>
  );
};